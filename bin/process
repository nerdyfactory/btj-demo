#!/usr/local/bin/python

import cv2
import numpy as np
import datetime
import sys
import json
from matplotlib import pyplot as plt

kernel = np.ones((5,5),np.uint8)

def saveImg(img, filename):
    cv2.imwrite('public/images/output/%s' % (filename), img)

def cannyEdges(img):
    img = cv2.Canny(img,100,200)
    img = cv2.dilate(img,kernel,iterations = 1)
    return img

def largestContour(contours):
    areas = map(lambda cnt: cv2.contourArea(cnt), contours)
    return contours[areas.index(max(areas))]

def smallestContour(contours):
    areas = map(lambda cnt: cv2.contourArea(cnt), contours)
    return contours[areas.index(min(areas))]

def filterContours(contours, size):
    return filter(lambda cnt: cv2.contourArea(cnt) > size, contours)

def filterChildren(contours, hierarchy):
    return map(lambda i: contours[i],
            filter(lambda x: x > 0,
                map(lambda (i, h): -1 if h[3] != -1 else i,
                    enumerate(hierarchy[0]))))

def shirtCountour():
    if shirtCountour.shirtShape is None:
        img = cv2.imread('./data/FullSizeRender.jpg', 1)
        img = graySplit(img)
        img, contours, hierarchy = cv2.findContours(img, cv2.RETR_CCOMP, 1)
        contours = filterChildren(contours, hierarchy)
        height, width = img.shape
        minSize = height * width * 0.005
        contours = filterContours(contours, minSize)
        #displayContours(img, contours)
        shirtCountour.shirtShape = contours[0]
    return shirtCountour.shirtShape
shirtCountour.shirtShape = None

def bestFit(contours, shape):
    scores = map(lambda cnt: cv2.matchShapes(cnt,shape,1,0), contours)
    return contours[scores.index(min(scores))]

def graySplit(img):
    img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    img = cv2.GaussianBlur(img,(5,5),0)
    _, img = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    img = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\
            cv2.THRESH_BINARY,51,2)
    return img

def hsbSplit(img):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    h,s,v = cv2.split(img)
    _, img = cv2.threshold(h, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    #img = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)
    #img = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)
    return img

def displayContours(img, contours):
    for cnt in contours:
        tmp = img.copy()
        tmp = cv2.drawContours(tmp, [cnt], 0, (0,0,0), 30)
        saveImg(tmp)

def transform(approx, img):
    sortX = sorted(map(lambda p: p[0][0], approx))
    sortY = sorted(map(lambda p: p[0][1], approx))

    #vertical 
    if sortY[3] - sortY[0] > sortX[3] - sortX[0]:
        distanceY = (sortX[3]-sortX[0])*297/210  
    #horizontal
    else:
        distanceY = (sortX[3]-sortX[0])*210/297

    baseX = int(width * 0.2)
    baseY = int(height * 0.2)
    pos = [
            [baseX + sortX[0], baseY + sortY[0]],
            [baseX + sortX[2], baseY + sortY[0]],
            [baseX + sortX[2], baseY + sortY[0] + distanceY],
            [baseX + sortX[0], baseY + sortY[0] + distanceY],
            ]
    avgX = np.average(sortX)
    avgY = np.average(sortY)
    # 1 2
    # 4 3
    # 1: small x, small y
    # 2: large x, small y
    # 3: large x, large y
    # 4: small x, large y
    def getPos(approx):
        if approx[0][0] < avgX and approx[0][1] < avgY:
            return pos[0]
        elif approx[0][0] > avgX and approx[0][1] < avgY:
            return pos[1]
        elif approx[0][0] > avgX and approx[0][1] > avgY:
            return pos[2]
        elif approx[0][0] < avgX and approx[0][1] > avgY:
            return pos[3]

    pts1 = np.float32(approx)
    pts2 = np.float32(map(getPos, approx))
    M = cv2.getPerspectiveTransform(pts1,pts2)
    return (cv2.warpPerspective(img,M,(int(width*1.5),int(height*1.5))), M)

data = json.loads(sys.argv[2])
filename = sys.argv[1]

imgOrg = cv2.imread('public/uploads/%s' % (filename), 1)
img = imgOrg.copy()

height, width, channels = img.shape

ratio = np.float64(width)/600

armStart = map(lambda s: int(np.float64(s) * ratio),  data['armStart'].split(','))
armEnd = map(lambda s: int(np.float64(s) * ratio),  data['armEnd'].split(','))
chestStart = map(lambda s: int(np.float64(s) * ratio),  data['chestStart'].split(','))
chestEnd = map(lambda s: int(np.float64(s) * ratio),  data['chestEnd'].split(','))
heightStart = map(lambda s: int(np.float64(s) * ratio),  data['heightStart'].split(','))
heightEnd = map(lambda s: int(np.float64(s) * ratio),  data['heightEnd'].split(','))

points1 = np.array([
        armStart,
        armEnd,
        chestStart,
        ], dtype='float32')

points2 = np.array([
        chestEnd,
        heightStart,
        heightEnd,
        ], dtype='float32')

img = cv2.circle(img,tuple(armStart),10,[0,0,0],-1)
img = cv2.circle(img,tuple(armEnd),10,[0,0,0],-1)
img = cv2.circle(img,tuple(chestStart),10,[0,0,0],-1)
img = cv2.circle(img,tuple(chestEnd),10,[0,0,0],-1)
img = cv2.circle(img,tuple(heightStart),10,[0,0,0],-1)
img = cv2.circle(img,tuple(heightEnd),10,[0,0,0],-1)

saveImg(img, filename + "1.png")
img = imgOrg.copy()
img = hsbSplit(img)
saveImg(img, filename + "2.png")


img, contours, hierarchy = cv2.findContours(img, cv2.RETR_CCOMP, 1)
contours = filterChildren(contours, hierarchy)
height, width = img.shape
minSize = height * width * 0.005
contours = filterContours(contours, minSize)
if len(contours) == 0:
    sys.exit()
contour = smallestContour(contours)
imgOrg = cv2.drawContours(imgOrg, [contour], 0, (0,0,0), 2)
arcLength = cv2.arcLength(contour,True)
tmp = 0.2
while(1):
    epsilon = tmp * arcLength
    approx = cv2.approxPolyDP(contour,epsilon,True)
    if len(approx) > 3 or tmp <=0:
        break
    tmp = tmp - 0.001
imgOrg = cv2.drawContours(imgOrg, [approx], 0, (0,255,0), 3)
imgOrg, M = transform(approx, imgOrg)

points1 = cv2.perspectiveTransform(np.array([points1]), M)
points2 = cv2.perspectiveTransform(np.array([points2]), M)
imgOrg = cv2.circle(imgOrg,tuple(points1[0][0]),10,[0,0,0],-1)
imgOrg = cv2.circle(imgOrg,tuple(points1[0][1]),10,[0,0,0],-1)
imgOrg = cv2.circle(imgOrg,tuple(points1[0][2]),10,[0,0,0],-1)
imgOrg = cv2.circle(imgOrg,tuple(points2[0][0]),10,[0,0,0],-1)
imgOrg = cv2.circle(imgOrg,tuple(points2[0][1]),10,[0,0,0],-1)
imgOrg = cv2.circle(imgOrg,tuple(points2[0][2]),10,[0,0,0],-1)
saveImg(imgOrg, filename + "3.png")



#hull = cv2.convexHull(largestCnt, returnPoints = False)
#defects = cv2.convexityDefects(largestCnt, hull)
#
#for i in range(defects.shape[0]):
#    s,e,f,_ = defects[i,0]
#    #print cnt.size, s, e, f
#    start = tuple(largestCnt[s][0])
#    end = tuple(largestCnt[e][0])
#    far = tuple(largestCnt[f][0])
#    cv2.line(img,start,end,[0,255,0],2)
#    cv2.circle(img,far,10,[0,0,255],-1)
